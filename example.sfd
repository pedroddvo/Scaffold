extern type Int = "int"
extern type USize = "size_t"
extern type String = "sfd_object*"
extern type Handle = "FILE*"
extern type Bool = "bool"

extern def Int.toUSize(a : Int) : USize = "sfd_int_to_usize"

extern def String.alloc(size cap : USize) : String = "sfd_alloc_string"
extern def String.append(a : String, b : &String) : String = "sfd_string_append"
extern def String.len(a : &String) : Int = "sfd_string_len"

extern def IO.getStdout() : Handle = "sfd_io_get_stdout"
extern def Handle.putStr(handle : Handle, string : &String) : Int = "sfd_io_put_str"

extern def Int.add(a b : Int) : Int = "sfd_int_add"
extern def Int.sub(a b : Int) : Int = "sfd_int_sub"
extern def Int.mul(a b : Int) : Int = "sfd_int_mul"
extern def Int.equal(a b : Int) : Bool = "sfd_int_eql"

type List[T] {
  cons(x : T, xs : List[T]),
  nil
}

def List.singleton[T](x : T) : List[T] = List.cons(x, List.nil)

def List.append[T](xs : List[T], y : T) : List[T] =
  match xs {
    List.nil => List.singleton(y),
    List.cons(x, xs) => List.cons(x, xs.append(y))
  }

def List.concat(xs : List[String]) : String =
  match xs {
    List.nil => "[]",
    List.cons(x, xs) => x.append(" :: ").append(List.concat(xs))
  }

def main() : Int =
  let a = List.cons("1", List.cons("2", List.singleton("3")));
  let stdout = IO.getStdout();
  let _ = stdout.putStr(a.append("4").concat());
  0
